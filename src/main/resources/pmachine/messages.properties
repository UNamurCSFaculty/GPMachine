[PInstruction]
PInstruction.AddTypeIntAddr=add type should be integer or address
PInstruction.ANDTypeBool=and type should be boolean
PInstruction.DECTypeIntAddr=dec argument should be integer or address
PInstruction.DIVTypeIntAddr=div type should be integer or address
PInstruction.DLPTypeIntAddrBool=dpl type should be integer, address or boolean
PInstruction.EQUTypeIntBool=equ type should be integer or boolean
PInstruction.GEQTypeIntBool=geq type should be integer or boolean
PInstruction.GRTTypeIntBool=grt type should be integer or boolean
PInstruction.INCTypeIntAddr=inc type should be address or integer
PInstruction.INDTypeIntAddrBool=ind type should be integer, boolean or address
PInstruction.INDTypeAddr=not of type address, as expected by ind a
PInstruction.INDTypeInt=not of type integer, as expected by ind i
PInstruction.INDTypeBool=not of type boolean, as expected by ind b
PInstruction.IXJTypeTopInt=Top of the stack should be Integer to execute ixj
PInstruction.LDATypeIntAddrBool=lda type should be either integer, address or boolean
PInstruction.LDCTypeIntAddrBool=ldc type should be integer, address or boolean
PInstruction.LDOTypeIntAddrBool=ldo type should be either integer, address or boolean
PInstruction.LEQTypeIntBool=leq type should be integer or boolean
PInstruction.LESTypeIntBool=les type should be integer or boolean
PInstruction.LODTypeIntAddrBool=lod type should be either integer, address or boolean
PInstruction.MULTypeIntAddr=mul type should be integer or address
PInstruction.NEGTypeIntAddr=neg type should be integer or address
PInstruction.NEQTypeIntBool=neq type should be integer or boolean
PInstruction.NewTypeTopInt=Top of the stack should be Integer to execute new
PInstruction.NewTypeTop-1Addr=Top-1 of the stack should be address to execute new
PInstruction.NOTTypeBool=not type should be boolean
PInstruction.SLITypeIntAddrBool=sli type should be integer, boolean or address
PInstruction.SROTypeTopAddr=Top of stack not of type address, as expected by sro a
PInstruction.SROTypeTopInt=Top of stack not of type integer, as expected by sro i
PInstruction.SROTypeTopBool=Top of stack not of type boolean, as expected by sro b
PInstruction.STOTypeIntAddrBool=sto should be typed with integer, boolean or address
PInstruction.STRTypeIntAddrBool=str arguments should be integer, address or boolean
PInstruction.SUBTypeIntAddr=sub type should be integer or address
PInstruction.MOVSTypeAddr=Type address expected in movs
PInstruction.MOVDTypeInt=Type int expected in movd
PInstruction.MOVDTypeAddr=Type address expected in movd

PInstruction.CommentDelimiter=;
PInstruction.TypeModifierInvalid1=Type modifier \"
PInstruction.TypeModifierInvalid2=\" invalid for instruction \"
PInstruction.TypeModifierInvalid3=\". Expected types are (
PInstruction.BadTypeSpecifier=Bad type specifier (should be i,b or a), here is
PInstruction.UnknownInstruction=Unknown instruction 
PInstruction.WrongParametersNumber=statement malformed (wrong number of parameters)
PInstruction.IntWronglyFormatted=Integer wrongly formatted in 
PInstruction.WrongNumberFormat=Wrong number format 

[StackElement]
StackElemInt.TypeName=int
StackElemInt.CompareIntegers=Can only compare integers
StackElemInt.OperandsAreNotInteger=Trying to apply some arithmetic operation on two StackElem that are not integers
StackElemInt.DivByZero=Division by zero
StackElemInt.DivByZeroAddition=Fatal error: DivByZeroException in addition\n
StackElemInt.DivByZeroUMinus=Fatal error: DivByZeroException in unary minus\n
StackElemInt.DivByZeroSubstraction=Fatal error: DivByZeroException in substraction\n
StackElemInt.DivByZeroMultiplication=Fatal error: DivByZeroException in multiplication\n
StackElemAddr.TypeName=addr
StackElemAddr.TypeComparisonError=Addresses can only be compared to addresses
StackElemAddr.OperandsTypeError=Trying to apply some arithmetic operation on two StackElem that are not addresses
StackElemBool.TypeName=bool
StackElemBool.TypeComparisonError=Elements must be of type bool to be compared
StackElemBool.BoolIsNot0or1=Boolean constant shall be 1 or 0
StackElemBool.BadOperandsType=Trying to logically compose two StackElem that are not booleans
StackElemPCAddr.TypeName=PC addr
StackElemPCAddr.TypeComparisonError=PC-Addr can only be compared to PC-Addr
StackElemNull.UndefineElemName=undef
StackElemNull.UndefineElemComparing=Undef cannot be compared with anything

[PFile]
PFile.CommentDelimiter=;
PFile.Define=define
PFile.MultiplyDefinedLabelError=Multiply defined label 
PFile.UndefinedLabelError=Undefined label 
PFile.JumpOutOfMemoryError=Jump out of instruction memory

[PStack]
PStack.StackOverflowError=Stack overflow on push (SP >= EP) 
PStack.PopUnderflowError=pop on empty Stack: SP <= 0
PStack.ElementAtAccessOutOfStack=elementAt tried to access element out of stack
PStack.StoreAtAccessOutOfStack=storeAt tried to access element out of stack
PStack.TextOutput1=Stack IN [MP = 
PStack.TextOutput2=\ ; SP = 
PStack.TextOutput3=; EP = 
PStack.TextOutput4=]\n
PStack.TextOutput5=\ STORE[
PStack.TextOutput6=] =
PStack.TextOutput7=\ \ ;   
PStack.TextOutput8=\nStack OUT\n
PStack.TextOutput9=(
PStack.TextOutput10=[
PStack.TextOutput11=] - 
PStack.TextOutput12=)
PStack.TextOutput13={
PStack.TextOutput14=}
PStack.StackExceptionOutput=StackException in contents() \n
PStack.StackExceptionOutputShort=StackException in shortContents() \n

[CRT]
SimpleCRT.WriteTextOutput=WRITE : 
SimpleCRT.ReadTextOutput=READ : 
SimpleCRT.InputException=Something went wrong while reading from input, probably some badly encoded value.

[PMachineJUI]
PMachineJUI.PMachineName=GPMachine
PMachineJUI.FileMenuName=File
PMachineJUI.UndoMenuName=Undo
PMachineJUI.UndoTipText=Undo last executed instruction
PMachineJUI.RunMenuName=Run
PMachineJUI.RunTipText=Pauses if runtime executed, or Runs the pmachine until it reaches a breakpoint, a \"read\" instruction or halts
PMachineJUI.StepMenuName=Step
PMachineJUI.StepTipText=Executes the next instruction
PMachineJUI.OpenMenuName=Open...
PMachineJUI.ReloadMenuName=Reload
PMachineJUI.ExitMenuName=Exit
PMachineJUI.ExecutionMenuName=Execution
PMachineJUI.BigStepMenuName=Big Step ...
PMachineJUI.BigStepTipText=Runs a group of \"n\" instructions and pauses
PMachineJUI.BreakpointsMenuName=Breakpoints
PMachineJUI.BreakpointsAddMenuName=Add Breakpoint
PMachineJUI.BreakpointsAddTipText=Add Breakpoint at selected p-code line
PMachineJUI.BreakpointsRemoveMenuName=Remove Breakpoint
PMachineJUI.BreakpointsRemoveTipText=Remove Breakpoint from selected p-code line
PMachineJUI.BreakpointsRemoveAllMenuName=Remove All Breakpoints
PMachineJUI.BreakpointsRemoveAllTipText=Remove All Breakpoints from p-code
PMachineJUI.WatchsMenuName=Watchs
PMachineJUI.WatchsAddMenuName=Add Watch
PMachineJUI.WatchsAddTipText=Add Watch at selected stack or heap element
PMachineJUI.WatchsRemoveMenuName=Remove Watch
PMachineJUI.WatchsRemoveTipText=Remove Watch from selected stack or heap element
PMachineJUI.WatchsRemoveAllMenuName=Remove All Watchs
PMachineJUI.WatchsRemoveAllTipText=Remove All Watchs from stack and heap
PMachineJUI.OptionsMenuName=Options
PMachineJUI.StackSizeMenuName=Stack Size
PMachineJUI.StackSizeNewMenuName=New Stack Size...
PMachineJUI.StackSizeNewDialogText=Enter Stack Size value [-1..2000] :
PMachineJUI.StackSize200MenuName=200 : Default Size
PMachineJUI.StackSize500MenuName=500
PMachineJUI.StackSize1000MenuName=1000
PMachineJUI.ResetMenuName=Reset
PMachineJUI.ResetTipText=Resets the state of the pmachine
PMachineJUI.HelpMenuName=Help
PMachineJUI.AboutMenuName=About ...
PMachineJUI.OpenMenuName=Open
PMachineJUI.OpenTipText=Opens a new PCode program
PMachineJUI.ReloadMenuName=Reload
PMachineJUI.ReloadTipText=Reread the current program from disk
PMachineJUI.OutputMenuName=Output
PMachineJUI.OutputExecutionSeparater=################
PMachineJUI.StackMenuName=Stack
PMachineJUI.HeapMenuName=Heap
PMachineJUI.PCodeMenuName=PCode
PMachineJUI.RegistersMenuName=Registers
PMachineJUI.PCMenuName=PC
PMachineJUI.SPMenuName=SP
PMachineJUI.EPMenuName=EP
PMachineJUI.MPMenuName=MP
PMachineJUI.PCTipText=Value of Program Counter (P-Counter)
PMachineJUI.SPTipText=Value of Stack Pointer (Top of stack)
PMachineJUI.EPTipText=Value of Extended Memory Pointer (Beginning of heap)
PMachineJUI.MPTipText=Current Frame start
[PMachineJUIDialogs]
PMachineJUI.AskNumberOfStepsDialog=How many steps do you want to execute without pausing?
PMachineJUI.AskNumberOfStepsCanceled=No value chosen
PMachineJUI.AskNumberOfStepsNotPositiveInt= is not a positive integer
PMachineJUI.AskNumberOfStepsNotValideFormattedInt= is not a correctly formatted integer
PMachineJUI.InputError=Input Error
PMachineJUI.BadIntFormat=Bad integer format
PMachineJUI.AskChooseFileError=File Error
PMachineJUI.AskChooseFileErrorFileSelection=Error in file selection
PMachineJUI.AskChooseFileCanceled=No file chosen
PMachineJUI.PromptIntegerInput=Enter an integer value
PMachineJUI.InputNotIntegerError=Input is not an integer
PMachineJUI.EmptyInputError=Input is empty
PMachineJUI.HeadlessExceptionError=HeadlessException thrown...

PMachineJUI.CopyrightStatement=, \n\tCopyright (C) 2002-2004 Yves Bontemps, \n\tCopyright (C) 2006 Khvalenski Andrew, \n\tCopyright (C) 2004-2008 Hubert Toussaint\ngpmachine comes with ABSOLUTELY NO WARRANTY; see gpl.txt for details.\nThis is free software, and you are welcome to redistribute it under certain conditions; see gpl.txt for details \n \n \nIcons  Copyright(C) 1998  by  Dean S. Jones \ndean@gallant.com \t http://sourceforge.net/projects/icon-collection/

[PMachine]
PMachine.ProgramName=gpmachine
PMachine.VersionNumber=3.0
PMachine.ReturnValue=return value
PMachine.FJP_TypeError=Top of stack must be boolean in fjp
PMachine.IXA_TypeError=ixa requires Address.Integer
PMachine.ReturnAddress=return addr
PMachine.LineDelimiter=--------------------------------------------------------
PMachine.BASE_TypeError=base needs to use an address
PMachine.RETF_TypeError=retf must assign an address to MP
PMachine.RETP_TypeError=retp must assign an address to MP
PMachine.DivByZeroError=Error: division by zero exception
PMachine.WrongTypeError=Error: wrong type exception
PMachine.NoWarranty=pmachine comes with ABSOLUTELY NO WARRANTY
PMachine.Usage=Usage : java -jar pmachine.jar [options] <filename>
PMachine.ArgSize=-S:
PMachine.ArgVerbose=-v
PMachine.ArgGUI=-gui
PMachine.EQU_TypeInformationError=equ: bad type information
PMachine.GEQ_TypeInformationError=geq: bad type information
PMachine.LEQ_TypeInformationError=leq: bad type information
PMachine.LES_TypeInformationError=les: bad type information
PMachine.NEQ_TypeInformationError=neq: bad type information
PMachine.GRT_TypeInformationError=grt: bad type information
PMachine.LDO_TypeInformationError=ldo: bad type information
PMachine.LDC_TypeInformationError=ldc: bad type information
PMachine.IND_TypeInformationError=ind: bad type information
PMachine.SRO_TypeInformationError=sro: bad type information
PMachine.STO_TypeInformationError=sto: bad type information
PMachine.INC_TypeInformationError=inc: bad type information
PMachine.DEC_TypeInformationError=dec: bad type information
PMachine.DPL_TypeInformationError=dpl: bad type information
PMachine.SLI_TypeInformationError=sli: bad type information
PMachine.LOD_TypeInformationError=lod: bad type information
PMachine.LDA_TypeInformationError=lda: bad type information
PMachine.STR_TypeInformationError=str: bad type information
PMachine.LDO_i_TypeError=ldo i expected integer type
PMachine.LDO_b_TypeError=ldo b expected boolean type
PMachine.LDO_a_TypeError=ldo a expected Address type
PMachine.SRO_a_TypeError=Top of stack not of type address, as expected by sro a
PMachine.SRO_i_TypeError=Top of stack not of type integer, as expected by sro i
PMachine.SRO_b_TypeError=Top of stack not of type boolean, as expected by sro b
PMachine.CHK_FailureError=chk failed
PMachine.DPL_a_TypeError=dpl a needs an address on top of stack
PMachine.DPL_i_TypeError=dpl i needs an integer on top of stack
PMachine.DPL_b_TypeError=dpl b needs a boolean on top of stack
PMachine.SLI_a_TypeError=sli a needs an address on top of stack
PMachine.SLI_b_TypeError=sli b needs a boolean on top of stack
PMachine.SLI_i_TypeError=sli i needs an integer on top of stack
PMachine.LOD_a_TypeError=lod a can only push addresses
PMachine.LOD_i_TypeError=lod i can only push integers
PMachine.LOD_b_TypeError=lod b can only push booleans
PMachine.STR_a_TypeError=str a should stores addresses
PMachine.STR_b_TypeError=str b should stores boolean
PMachine.STR_i_TypeError=str i should stores integers
PMachine.PRINT_TypeError=Print can only write integers
PMachine.DefinInstruction=define
PMachine.EOFReachedError=EOF reached
PMachine.ToRedistributeIt=to redistribute it under certain conditions. See gpl.txt for details
PMachine.IndexOutOfBoundsError=Runtime Error:Index out of bounds 
PMachine.InvalidInstructionError=Error: invalid instruction exception
PMachine.IndexOutOfBoundsWarning=Normally, this is NOT a bug in the PCode but rather, in the original program
PMachine.IND_i_RefTypeError=Reference must be of type Address, in ind i
PMachine.IND_a_RefTypeError=Reference must be of type Address, in ind b
PMachine.STO_i_RefTypeError=Reference is not of type Address in sto i
PMachine.STO_b_RefTypeError=Reference is not of type Address in sto b
PMachine.CopyrightStatement=, Copyright (C) 2002-2004 Yves Bontemps, Copyright (C) 2006 Khvalenski Andrew, Copyright (C) 2004-2008 Hubert Toussaint
PMachine.ThisIsFreeSoftware=This is free software, and you are welcome
PMachine.OptionsDescription=Options: \\n -S:<int> \\t : set stack size to <int> (default : -S:1000) \\n -v \\t : verbose, display stack content (default: disabled) \\n -gui \\t : start the GUI (Graphical User Interface) (default: enabled) \\n Note: -v is disabled when -gui is activated \\n \\n and <filename> is a text file containing valid PCode
PMachine.StackExceptionError=Error: stack exception
PMachine.StackHeapCollision=Collision between SP and EP
PMachine.JumpOutsiteProgramMemoBounds=Jump outside Program Memory Bounds
PMachine.JumpToUnknownAddress=Jump to unknown address
PMachine.NoInstruction=No instruction
PMachine.EP=EP
PMachine.CHK_MissingParameterError=chk: missing parameter

[ExecutionEnvironment]
ExecutionEnvironment.ExecuteIconFile=/icons/VCRPausePlay.png
ExecutionEnvironment.ResetIconFile=/icons/VCRStop.png
ExecutionEnvironment.BigStepIconFile=/icons/VCRFastForward.png
ExecutionEnvironment.UndoOnesIconFile=/icons/VCRBack.png
ExecutionEnvironment.RunIconFile=/icons/VCRForward.png
ExecutionEnvironment.OpenFileIconFile=/icons/Open.png
ExecutionEnvironment.ReloadFileIconFile=/icons/FolderOut.png
ExecutionEnvironment.AddBreakpointIconFile=/icons/BreakpointPlus.png
ExecutionEnvironment.RemoveBreakpointIconFile=/icons/BreakpointMinus.png
ExecutionEnvironment.RemoveAllBreakpointsIconFile=/icons/BreakpointMinusAll.png
ExecutionEnvironment.AddWatchIconFile=/icons/WatchPlus.png
ExecutionEnvironment.RemoveWatchIconFile=/icons/WatchMinus.png
ExecutionEnvironment.RemoveAllWatchsIconFile=/icons/WatchMinusAll.png
ExecutionEnvironment.BreakpointIconFile=/icons/Stop.png
ExecutionEnvironment.WatchIconFile=/icons/WatchStop.png
ExecutionEnvironment.AboutIconFile=/icons/Help3.png
ExecutionEnvironment.CommandLine=java -jar gpmachine.jar [options...] [filename] \n
ExecutionEnvironment.CommandLineDescription=Launches an instance of the GPMachine, interpreting filename \n
ExecutionEnvironment.OptionsDescriptionTitle=PMachine.OptionsDescription
ExecutionEnvironment.StackSizeOptionDescription=\t -S:<int>, --stack<int>, -s<int> : \t set stack size to <int> (default: -S:200)\n
ExecutionEnvironment.VerboseOptionDescription=\t -v, --verbose : \t increases verbosity level (default: disabled)\n
ExecutionEnvironment.GUIOptionDescription=\t -g, --gui, -gui :\t displays the swing user interface (default).\n \t -nogui, --nogui: \t disables the user interface. \n \t When disabled, a file name *must* be provided. (default:disabled) \n
ExecutionEnvironment.LicenseOptionDescription=\t -n, --no-license : \t turns off GPL display, upon start \n
